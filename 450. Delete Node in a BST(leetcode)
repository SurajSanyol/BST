/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
   

    int maxVal(TreeNode* node) {

        if (!node)
            return -1;

        while (node->right != NULL) {
            node = node->right;
        }
        return node->val;
    }

    TreeNode* deleteNode(TreeNode* root, int key) {
        if (!root)
            return root;

        if (key < root->val) {
            root->left = deleteNode(root->left, key);
        } else if (key > root->val) {
            root->right = deleteNode(root->right, key);
        } else {
            if (!root->left && !root->right) {
                delete root;
                return NULL;
            } else if (!root->left) {
                TreeNode* child = root->right;
                delete root;
                return child;
            } else if (!root->right) {
                TreeNode* child = root->left;
                delete root;
                return child;
            } else {
                int inorderPre = maxVal(root->left);
                root->val = inorderPre;
                root->left = deleteNode(root->left, inorderPre);
            }
        }
        return root;
    }
};
