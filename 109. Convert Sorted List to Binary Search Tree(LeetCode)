/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:  
    TreeNode* convertIntoBST(ListNode*&head,int LLSize){
         if (LLSize <= 0) return nullptr;
            
            TreeNode* leftSubtree = convertIntoBST(head,LLSize-1-LLSize/2);
            TreeNode* root= new TreeNode(head->val);
            root->left=leftSubtree;
            head=head->next;


            // right subtree call 
            root->right = convertIntoBST(head,LLSize/2); 
            return root;
     }


    int findLLSize(ListNode* head) {
        if (head == NULL)
            return 0;
        int count = 0;
        while (head) {
            count++;
            head = head->next;
        }
        return count;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if (!head)
            return NULL ;
        int LLSize = findLLSize(head);
       return convertIntoBST(head, LLSize);
    }
};
